; 这个内存是用来存储编译后的字节码的
; 默认128 Laravel 应用一般建议设置为 256
opcache.memory_consumption = 256

; 会对程序所有的字符串进行统一存储以加快存取速度
opcache.interned_strings_buffer = 32

; 最大加速多少个脚本文件，视项目脚本文件数而定
opcache.max_accelerated_files = 500000

; 最大作废比例百分比，到达这个比例会重启
opcache.max_wasted_percentage = 10


; 开启的话，会按照 opcache.revalidate_freq 设置的频率去检查文件
; 是否修改以便重新缓存，默认开启
; 生产环境下请设置为关闭，然后写自动化脚本，在每次更新代码后自动重启 OPcache
opcache.validate_timestamps = 1

; 文件更新检测频率，单位秒，只有在 opcache.validate_timestamps
; 开启时才有效。默认为 2，意味着 2 秒钟检查一次，会对文件系统造成负担
; 如果是在开发环境中请酌情使用，生产环境随意设置，因为我们会设置 validate_timestamps 为关闭。
opcache.revalidate_freq = 2

; 是否在生成机器码点时候使用AVX指令
;   0: 不使用
;   1: 使用
; 寄存器分配策略
;   0: 不使用寄存器分配
;   1: 局部(block)域分配
;   2: 全局(function)域分配
; JIT触发策略
;   0: PHP脚本载入的时候就JIT
;   1: 当函数第一次被执行时JIT
;   2: 在一次运行后，JIT调用次数最多的百分之(opcache.prof_threshold * 100)的函数
;   3: 当函数/方法执行超过N(N和opcache.jit_hot_func相关)次以后JIT
;   4: 当函数方法的注释中含有@jit的时候对它进行JIT
;   5: 当一个Trace执行超过N次（和opcache.jit_hot_loop, jit_hot_return等有关)以后JIT
; JIT优化策略，数值越大优化力度越大
;   0: 不JIT
;   1: 做opline之间的跳转部分的JIT
;   2: 内敛opcode handler调用
;   3: 基于类型推断做函数级别的JIT
;   4: 基于类型推断，过程调用图做函数级别JIT
;   5: 基于类型推断，过程调用图做脚本级别的JIT
;opcache.jit = 1235
;opcache.jit_buffer_size = 128
;opcache.jit_hot_func = 5
